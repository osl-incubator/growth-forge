{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#growth-forge","title":"Growth Forge","text":"<p>The main objective of this platform is to offer a space to handle and organize feedback between two people</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://growth-forge.github.io</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>The security of our code: Bandit is a powerful tool that we use in our Python   project to ensure its security. This tool analyzes the code and detects   potential vulnerabilities. Some of the key features of Bandit are its ease of   use, its ability to integrate with other tools, and its support for multiple   Python versions. If you want to know about bandit you can check its   documentation.</p> </li> <li> <p>Finds unused code: Vulture is   useful for cleaning up and finding errors in large code bases in Python.</p> </li> <li> <p>Complexity of functions and modules: We use   McCabe to identify the complexity in our   Python code that may be difficult to maintain or understand. By identifying   complex code at the outset, we as developers can refactor it to make it easier   to maintain and understand. In summary, McCabe helps us to improve the quality   of our code and make it easier to maintain. If you would like to learn more   about McCabe and code complexity, you can visit   McCabe - Code Complexity Checker.   This tool is included with Flake8.</p> </li> <li> <p>Integration with DevOps tools: We use Docker because it allows us to create an   isolated environment for our application that includes all the necessary   dependencies, libraries and configurations. This makes it easier to manage and   reproduce our development and production environments without any conflicts or   inconsistencies.</p> </li> </ul> <p>With Docker, we can easily share our application with others and deploy it to   different environments. This streamlines our development, testing, deployment,   and collaboration workflows, making the entire process more efficient.</p> <ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookieninja and the osl-incubator/scicookie project template.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"contributing/","title":"Contributing","text":"<p>In order to be able to contribute, it is important that you understand the project layout. This project uses the src layout, which means that the package code is located at <code>./src/growth_forge</code>.</p> <p>For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</p> <p>In addition, you should know that to build our package we use Poetry, it's a Python package management tool that simplifies the process of building and publishing Python packages. It allows us to easily manage dependencies, virtual environments and package versions. Poetry also includes features such as dependency resolution, lock files and publishing to PyPI. Overall, Poetry streamlines the process of managing Python packages, making it easier for us to create and share our code with others.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/xmnlab/growth-forge.git/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Growth Forge could always use more documentation, whether as part of the official Growth Forge docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/xmnlab/growth-forge.git/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are   welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here\u2019s how to set up <code>growth-forge</code> for local development.</p> <ol> <li>Fork the <code>growth-forge</code> repo on GitHub.</li> <li>Clone your fork locally:</li> </ol> <pre><code>$ git clone git@github.com:your_name_here/growth-forge.git\n</code></pre> <ol> <li>Install Dependencies: Use <code>mamba</code> to create a Conda environment and<code>poetry</code> for managing Python dependencies.</li> </ol> <pre><code>$ cd growth-forge/  # in the case you are not in the root of the project\n$ mamba env create --file conda/dev.yaml\n$ conda activate growth-forge\n$ poetry install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <pre><code>Now you can make your changes locally.\n</code></pre> <ol> <li>When you\u2019re done making changes, check that your changes pass the linter and     the tests:</li> </ol> <pre><code>$ makim tests.unit\n$ makim tests.linter\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#configurations-before-working-on-growth-forge","title":"Configurations before working on Growth-Forge","text":"<ol> <li> <p>If you don't have Docker installed, you can visit the following page:    click here and follow the    steps. Do not forget to see the steps of post install    here</p> </li> <li> <p>Run the following command:</p> </li> </ol> <p><pre><code>$ sugar build\n</code></pre> 3. It is important to run the command:</p> <p><pre><code>$ makim django.migrate\n</code></pre> This command is executed to apply migrations based on the current migration files.</p> <ol> <li>To create a superuser, you should use the following commands with your information:</li> </ol> <pre><code>$ makim django.create-superuser --email\n$ makim django.create-superuser --username\n$ makim django.create-superuser --password\n</code></pre> <ol> <li>Run the comand to execute Django:</li> </ol> <pre><code>$ sugar ext start --options -d\n</code></pre> <p>or</p> <pre><code>$ sugar ext restart --options -d\n</code></pre> <p>The project will be accessible at <code>localhost:8000</code>.</p> <ol> <li>To view all logs, you can execute the following command:</li> </ol> <pre><code>$ sugar ext restart --options\n</code></pre> <p>The command mentioned is used to restart the project, which can be useful when registering a new user.</p> <p>After adding a new user, you should check the console for the email verification link. To complete the email verification, click on the link, which will open in your browser. There, you will see the option to verify the email. This step is crucial to ensure the email address is valid and active, enabling the new user to fully utilize their account.</p> <ol> <li>Once you have accessed the verification link and verified your email, you can navigate through the menu of the project \"growth-forge.\" This menu will likely offer various options related to project settings.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your     new functionality into a function with a docstring, and add the feature to     the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>feat(pencil)!: The graphiteWidth option has been removed</code> Breaking Release <p>source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</p> <p>As this project uses the <code>squash and merge</code> strategy, ensure to apply the commit message format to the PR's title.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Growth Forge, run this command in your terminal:</p> <pre><code>$ pip install growth-forge\n</code></pre> <p>This is the preferred method to install Growth Forge, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for Growth Forge can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/xmnlab/growth-forge.git\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/xmnlab/growth-forge.git/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ poetry install\n</code></pre>"}]}