version: 1.0
groups:
  clean:
    targets:
      tmp:
        help: Clean unnecessary temporary files
        shell: bash
        run: |
          rm -fr build/
          rm -fr dist/
          rm -fr .eggs/
          rm -f .coverage
          rm -fr htmlcov/
          rm -fr .pytest_cache
          rm -fr .mypy_cache
          rm -fr .ruff_cache
          find . -name '*.egg-info' -exec rm -fr {} +
          find . -name '*.egg' -exec rm -f {} +
          find . -name '*.pyc' -exec rm -f {} +
          find . -name '*.pyo' -exec rm -f {} +
          find . -name '__pycache__' -exec rm -fr {} +
          find . -name '*~' -exec rm -f {} +

  docs:
    targets:
      build:
        help: Build documentation
        run: |
          mkdocs build --config-file docs/mkdocs.yaml

      preview:
        help: Preview documentation page locally
        dependencies:
          - target: docs.build
        run: |
          mkdocs build --config-file docs/mkdocs.yaml

  tests:
    targets:
      linter:
        help: Run linter tools
        run: |
          pre-commit install
          pre-commit run --all-files --verbose

      unit:
        help: Run tests
        args:
          app:
            help: The name of the app
            type: string
          module:
            help: Specify the python module used for the test
            type: string
            default: ""
          settings:
            help: Specify the django settings module
            type: string
            default: ""
          params:
            help: Specify parameters to be used for tests
            type: string
            default: "-v 3"
        shell: bash
        run: |
          CMD="python manage.py test --no-input {{ args.app or args.module }} \
            --settings={{ args.settings or env.DJANGO_SETTINGS_MODULE }} {{ args.params }}"
          sugar ext start --services postgres --options -d
          sugar run --service app --cmd $CMD

      ci:
        help: run the sames tests executed on CI
        dependencies:
          - target: tests.unit
          - target: tests.linter

  package:
    targets:
      build:
        help: "Build the package"
        run: poetry build

  release:
    vars:
      app: |
        npx --yes \
        -p semantic-release \
        -p "@semantic-release/commit-analyzer" \
        -p "@semantic-release/release-notes-generator" \
        -p "@semantic-release/changelog" \
        -p "@semantic-release/exec" \
        -p "@semantic-release/github" \
        -p "@semantic-release/git" \
        -p "@google/semantic-release-replace-plugin" \
        semantic-release

    targets:
      ci:
        help: run semantic release on CI
        run: {{ vars.app }} --ci

      dry:
        help: run semantic release in dry-run mode
        run: {{ vars.app }} --dry-run

  django:
    help: command for the django app
    targets:
      makemigrations:
        help: Run django makemigrations command (just for development)
        shell: bash
        args:
          check:
            help: |
              Just check if the latest migration files were already created.
            type: bool
            action: store_true
        run: |
          sugar ext start --services postgres --options -d

          CWD=$(pwd)
          CMD_FLAG="{{ '--check' if args.check else '' }} --no-input"

          for app in 'sites' 'growth_plan_linker' 'projects' 'linker' ''; do
            echo -e "\nMaking migration files for: '${app}' ...\n"
            CMD="python manage.py makemigrations ${CMD_FLAG} ${app}"
            sugar run --service app --cmd $CMD
          done

          echo "[II] postgres is running."

      migrate:
        help: Migrate regarding to the current migration files
        shell: bash
        run: |
          sugar ext start --services postgres --options -d
          echo "[II] postgres is running."

          CMD="python manage.py migrate --no-input"
          sugar run --service app --cmd $CMD
